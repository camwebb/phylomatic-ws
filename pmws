#!./gawk -f

## Webservice for phylomatic 

## This program is free software; you can redistribute it and/or
## modify it under the terms of the BSD 2-Clause License:
## http://www.opensource.org/licenses/bsd-license.php
## Copyright (c) 2012, Campbell Webb <cwebb@oeb.harvard.edu>

# (requires gawk4 as a symlink from ./gawk)

@include "lib/fyt2new.awk"
@include "lib/cdao2fyt.awk"
@include "lib/readfyt.awk"
@include "lib/utils.awk"
@include "lib/new2fyt.awk"
@include "lib/fyt2nexml.awk"
@include "lib/phylomatic.awk"

# This script is the main controller

BEGIN{

  ORS = "";
  # PS = PROCINFO["pid"] ;

  # set executables. One may need to add symlinks to bin/ dir.
  findexecs();

  # clean old files (older than one minute)
  system("rm -f `find run -type f -cmin +1 -not -name .gitignore -print` \
          >& /dev/null");

  # GET or POST?
  # test with curl -d "a=b" [-G] <URL>
  RS = "\x04";
  if (ENVIRON["QUERY_STRING"])
	{
	  IN = ENVIRON["QUERY_STRING"] ;
	}
  else getline IN;
  
  # parse input
  split( IN, query, "&" );
  for (i in query)
	{
	  split(query[i],tmpquery,"=");
	  # test for size of tree ### DISABLE IF RUNNING LOCALLY ###
	  if ((length(tmpquery[2]) > 200000) && (IN !~ "local=1"))
		{ error("Trees/taxa lists over 200kB must be passed by URI") }  
	  f[tmpquery[1]] = decode(tmpquery[2]);
	}

  # Check for consistency in switches:

  if ((!f["tree"]) && (!f["treeuri"]) && (!f["storedtree"])) 
	{ error("either tree or treeuri or storedtree must be given") }
  if (length( substr(f["tree"],1,1) substr(f["treeuri"],1,1) \
			  substr(f["storedtree"],1,1)) > 1) 
	{ error("either tree OR treeuri OR storedtree must be given") }
  if ((f["method"] != "phylomatic") && (f["method"] != "convert"))
	{ error("method of phylomatic or convert must be given") }
  if ((f["method"] == "phylomatic") && (!f["taxa"]) && (!f["taxauri"]))
	{ error("if method=phylomatic, taxa or taxauri must be given") }
  if ((f["informat"] != "newick") && (f["informat"] != "nexml") &&	\
	  (f["informat"] != "cdaordf"))
	{ error("informat must be either newick, nexml or cdaordf") }
  if ((f["outformat"] != "newick") && (f["outformat"] != "nexml") &&	\
	  (f["outformat"] != "fyt"))
	{ error("outformat must be either newick, nexml or fyt") }

  # added for Ferry - to be removed removed:
  if ((f["method"] == "convert") && (f["storedtree"] == "slik2015")) {
    error("Sorry, the Slik 2015 tree is not for public access yet.")
  }
  
  # BEGIN controller

  # 1. MEGATREE via URI TO MEMORY:

  if(f["treeuri"])
	{
	  cmd = "curl --max-filesize 10000000 -L -s -H \"Accept: application/rdf+xml\" \"" f["treeuri"] "\"";
	  RS = "\x04";
	  cmd | getline f["tree"] ;
	  close(cmd);
	  if ((!f["tree"]) ||												\
		  (f["tree"] ~ "404 Not Found")) error("URI appears to be invalid");
	}
  
  else if (f["storedtree"])
	{
	  RS = "\x04";
	  # note: the ( ) are needed
	  getline f["tree"] < ( "data/" f["storedtree"] ".new" ) ;
	  close("data/" f["storedtree"] ".new");
	}

  # 2. TAXA list via URI TO MEMORY:

  if(f["taxauri"])
	{
	  cmd = "curl --max-filesize 5000000 -s \"" f["taxauri"] "\"";
	  RS = "\x04";
	  cmd | getline f["taxa"] ;
	  close(cmd);
	  if ((!f["taxa"]) ||												\
		  (f["taxa"] ~ "404 Not Found")) error("URI appears to be invalid");
	}

  # 3. CONVERT TO internal phylo structure

  if (f["informat"] == "newick")
	{
	  new2fyt(f["tree"]);
	}

  else if (f["informat"] == "cdaordf")
	{	
	  cmd = RAPPER " -q -i rdfxml -o ntriples - 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'"
	  print f["tree"] |& cmd ;
	  close(cmd, "to");
	  RS = "\x04";
	  cmd |& getline results ;
	  close(cmd);
	  cdaottl2fyt(results) ;
	}

  else if (f["informat"] == "nexml")
	{
	  cmd = XGAWK " -f lib/nexml2fyt.awk" ;
	  print f["tree"] |& cmd ;
	  close(cmd, "to");
	  RS = "\x04";
	  cmd |& getline results ;
	  close(cmd);
	  readfyt(results);
	}

  # for testing:
  # curl --data-urlencode tree@tmp/nexmlconvert.post -d method=convert \
  #   -d informat=nexml http://localhost/~cam/phylomatic-ws/pmws
  # curl -d treeuri=http://localhost/~cam/phylomatic-ws/eg/tol.nexml.xml \
  #   -d method=convert -d informat=nexml								\
  #   http://localhost/~cam/phylomatic-ws/pmws > out

  # METHODS:

  if (f["method"] == "phylomatic")
	{
	  phylomatic();

	  
	  # # get taxa
	  # print gensub(/\|/,"\n","G", encode(f["taxa"])) "\n" > "run/" PS ".taxa" ;

	  # # tree data provided directly 
	  # if (f["tree"]) 
	  # 	{
	  # 	  if ((f["informat"] == "newick") || (f["informat"] == ""))
	  # 		{
	  # 		  print encode(f["tree"]) > "run/" PS ".phylo" ;
	  # 		}
	  # 	  else if (f["informat"] == "nexml")
	  # 		{
	  # 		  print encode(f["tree"]) > "run/" PS ".nexml" ;
	  # 		  system("cat run/" PS ".nexml | ./nexml2newick > run/" PS ".phylo")			}
	  # 	}
	  # else # treeuri
	  # 	{
	  # 	}

	  # # Run CLI phylomatic
	  # system(PM " -t run/" PS ".taxa -f run/" PS ".phylo > run/" PS ".out") ;
	  # RS = "\x04"; 
	  # "cat run/" PS ".out" | getline results ;

	  # print "Content-type: text/plain\n\n";
	  # print decode(results);
	}

  # OUTPUT in requested format

  # print "Content-type: text/plain\n\n";
  if (f["outformat"] == "newick") fyt2new();
  else if (f["outformat"] == "fyt") printfyt();
  else if (f["outformat"] == "nexml") fyt2nexml();
  
  # output any warnings
  # if (warning) print warning;
	  
  #	}

  # for (i in ENVIRON) print i " : " ENVIRON[i] "\n";
  # if (ENVIRON["HTTP_ACCEPT_ENCODING"] ~ gzip) ....

  exit;
  
}

